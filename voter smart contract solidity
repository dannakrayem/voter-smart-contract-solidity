//SPDX-License-Identifier: MIT

//chairman is account selected when you deploy. changes to chairman account gives you voter account

pragma solidity >=0.7.0 <0.9.0;

pragma abicoder v2;

contract Ballo {

struct Voter {
    uint weight;
    bool voted;
    uint vote;
}

struct Candidate {
    string name;
    uint voteCount;
}

address public chairperson;

mapping(address => Voter) public voters;

Candidate[] public candidates;

enum State {Created, Voting, Ended}

State public state;

constructor(string[] memory candidateNames) {
    chairperson = msg.sender;
    voters[chairperson].weight = 1;
    state = State.Created;

    for(uint i=0; i< candidateNames.length; i++){
        candidates.push(Candidate({
            name: candidateNames[i],
            voteCount: 0
        }));
    }
}

    modifier onlySmartContractOwner () {
        require(
            msg.sender == chairperson, "Only chairperson can start the voting"
        );
        _;
    }

    modifier CreatedState() {
        require(state== State.Created, "it must be in started");
        _;
    }

    modifier VotingState() {
        require (state== State.Voting, "it must be in voting period");
        _;
    }

    modifier EndedState() {
        require (state == State.Ended, "it must be in the ending period");
        _;
    }

    function addCandidates(string[] memory candidateNames) public EndedState {
        state = State.Created;
        for (uint i=0; i< candidateNames.length; i++) {
            candidates.push(Candidate({
                name: candidateNames[i],
                voteCount: 0
            }));
        }
    }       

    function startVote() public onlySmartContractOwner CreatedState {
        state = State.Voting;
    }

    function endVote() public onlySmartContractOwner VotingState {
        state = State.Ended;
    }

    function givingRightToVote(address voter) public {
        require(msg.sender== chairperson, "Only chairperson can give right to vote.");
        require(!voters[voter].voted, "the voter already voted");
        require(voters[voter].weight== 0);
        voters[voter].weight=1;
    }
    function vote (uint candidate) public VotingState {
        Voter storage sender = voters[msg.sender];
        require (sender.weight !=0, "has no right to vote");
        require (!sender.voted, "already voted");
        sender.voted = true;
        sender.vote = candidate;

        candidates[candidate].voteCount += sender.weight;
    }

    function winningCandidate() public EndedState view returns(string memory winnername_) {
        uint winningVoteCount=0;
        for (uint p=0; p< candidates.length; p++) {
            if (candidates[p].voteCount > winningVoteCount) {
                winningVoteCount = candidates[p].voteCount;
                winnername_ = candidates[p].name;
            }
        }
    }
    
}
